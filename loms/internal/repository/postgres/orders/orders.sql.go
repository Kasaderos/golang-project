// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: orders.sql

package orders

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrderItem = `-- name: AddOrderItem :exec
INSERT INTO order_item (
    order_id,
    sku,
    count
) VALUES ($1, $2, $3)
`

type AddOrderItemParams struct {
	OrderID pgtype.Int8 `json:"order_id"`
	Sku     pgtype.Int8 `json:"sku"`
	Count   pgtype.Int4 `json:"count"`
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) error {
	_, err := q.db.Exec(ctx, addOrderItem, arg.OrderID, arg.Sku, arg.Count)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id,
    status_id
) VALUES ($1, $2)
RETURNING id
`

type CreateOrderParams struct {
	UserID   pgtype.Int8 `json:"user_id"`
	StatusID pgtype.Int4 `json:"status_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.StatusID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, status_id, created_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StatusID,
		&i.CreatedAt,
	)
	return i, err
}

const setStatus = `-- name: SetStatus :exec
update orders 
set status_id = $1
where id = $2
`

type SetStatusParams struct {
	StatusID pgtype.Int4 `json:"status_id"`
	ID       int64       `json:"id"`
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) error {
	_, err := q.db.Exec(ctx, setStatus, arg.StatusID, arg.ID)
	return err
}
