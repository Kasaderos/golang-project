// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: stock.sql

package stock

import (
	"context"
)

const getBySKU = `-- name: GetBySKU :one
select count - reserved from stock
where sku = $1
`

func (q *Queries) GetBySKU(ctx context.Context, sku int64) (int32, error) {
	row := q.db.QueryRow(ctx, getBySKU, sku)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const reserveCancel = `-- name: ReserveCancel :exec
update stock 
set count = count + $1,
    reserved = reserved - $1
where reserved >= $1 and sku = $2
`

type ReserveCancelParams struct {
	Count int64 `json:"count"`
	Sku   int64 `json:"sku"`
}

func (q *Queries) ReserveCancel(ctx context.Context, arg ReserveCancelParams) error {
	_, err := q.db.Exec(ctx, reserveCancel, arg.Count, arg.Sku)
	return err
}

const reserveRemove = `-- name: ReserveRemove :exec
update stock
set reserved = reserved - $1
where sku = $2
`

type ReserveRemoveParams struct {
	Reserved int64 `json:"reserved"`
	Sku      int64 `json:"sku"`
}

func (q *Queries) ReserveRemove(ctx context.Context, arg ReserveRemoveParams) error {
	_, err := q.db.Exec(ctx, reserveRemove, arg.Reserved, arg.Sku)
	return err
}

const reserveStock = `-- name: ReserveStock :exec
update stock 
set count = count - $1,
    reserved = reserved + $1
where count >= $1 and sku = $2
`

type ReserveStockParams struct {
	Count int64 `json:"count"`
	Sku   int64 `json:"sku"`
}

func (q *Queries) ReserveStock(ctx context.Context, arg ReserveStockParams) error {
	_, err := q.db.Exec(ctx, reserveStock, arg.Count, arg.Sku)
	return err
}
