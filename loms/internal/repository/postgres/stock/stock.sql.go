// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: stock.sql

package stock

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countReservedStocksBySKU = `-- name: CountReservedStocksBySKU :one
select sum(count) from reserved_stock
where sku = $1
`

func (q *Queries) CountReservedStocksBySKU(ctx context.Context, sku pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countReservedStocksBySKU, sku)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const countStocksBySKU = `-- name: CountStocksBySKU :one
select count from stock
where sku = $1
`

func (q *Queries) CountStocksBySKU(ctx context.Context, sku pgtype.Int8) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, countStocksBySKU, sku)
	var count pgtype.Int8
	err := row.Scan(&count)
	return count, err
}

const deleteReservedStockByUserID = `-- name: DeleteReservedStockByUserID :exec
delete from reserved_stock 
where user_id = $1
`

func (q *Queries) DeleteReservedStockByUserID(ctx context.Context, userID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteReservedStockByUserID, userID)
	return err
}

const getReservedStockByUsedID = `-- name: GetReservedStockByUsedID :many
select user_id, sku, count from reserved_stock
where user_id = $1
`

func (q *Queries) GetReservedStockByUsedID(ctx context.Context, userID pgtype.Int8) ([]ReservedStock, error) {
	rows, err := q.db.Query(ctx, getReservedStockByUsedID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReservedStock
	for rows.Next() {
		var i ReservedStock
		if err := rows.Scan(&i.UserID, &i.Sku, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeStocks = `-- name: RemoveStocks :exec
update stock
set count = count - $1
where sku = $2
`

type RemoveStocksParams struct {
	Count pgtype.Int8 `json:"count"`
	Sku   pgtype.Int8 `json:"sku"`
}

func (q *Queries) RemoveStocks(ctx context.Context, arg RemoveStocksParams) error {
	_, err := q.db.Exec(ctx, removeStocks, arg.Count, arg.Sku)
	return err
}

const reserveStock = `-- name: ReserveStock :exec
insert into reserved_stock (
    user_id,
    sku,
    count
) VALUES ($1, $2, $3)
`

type ReserveStockParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Sku    pgtype.Int8 `json:"sku"`
	Count  pgtype.Int8 `json:"count"`
}

func (q *Queries) ReserveStock(ctx context.Context, arg ReserveStockParams) error {
	_, err := q.db.Exec(ctx, reserveStock, arg.UserID, arg.Sku, arg.Count)
	return err
}
