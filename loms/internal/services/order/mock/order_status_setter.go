package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/loms/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderStatusSetterMock implements order.OrderStatusSetter
type OrderStatusSetterMock struct {
	t minimock.Tester

	funcSetStatus          func(ctx context.Context, orderID models.OrderID, status models.Status) (err error)
	inspectFuncSetStatus   func(ctx context.Context, orderID models.OrderID, status models.Status)
	afterSetStatusCounter  uint64
	beforeSetStatusCounter uint64
	SetStatusMock          mOrderStatusSetterMockSetStatus
}

// NewOrderStatusSetterMock returns a mock for order.OrderStatusSetter
func NewOrderStatusSetterMock(t minimock.Tester) *OrderStatusSetterMock {
	m := &OrderStatusSetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetStatusMock = mOrderStatusSetterMockSetStatus{mock: m}
	m.SetStatusMock.callArgs = []*OrderStatusSetterMockSetStatusParams{}

	return m
}

type mOrderStatusSetterMockSetStatus struct {
	mock               *OrderStatusSetterMock
	defaultExpectation *OrderStatusSetterMockSetStatusExpectation
	expectations       []*OrderStatusSetterMockSetStatusExpectation

	callArgs []*OrderStatusSetterMockSetStatusParams
	mutex    sync.RWMutex
}

// OrderStatusSetterMockSetStatusExpectation specifies expectation struct of the OrderStatusSetter.SetStatus
type OrderStatusSetterMockSetStatusExpectation struct {
	mock    *OrderStatusSetterMock
	params  *OrderStatusSetterMockSetStatusParams
	results *OrderStatusSetterMockSetStatusResults
	Counter uint64
}

// OrderStatusSetterMockSetStatusParams contains parameters of the OrderStatusSetter.SetStatus
type OrderStatusSetterMockSetStatusParams struct {
	ctx     context.Context
	orderID models.OrderID
	status  models.Status
}

// OrderStatusSetterMockSetStatusResults contains results of the OrderStatusSetter.SetStatus
type OrderStatusSetterMockSetStatusResults struct {
	err error
}

// Expect sets up expected params for OrderStatusSetter.SetStatus
func (mmSetStatus *mOrderStatusSetterMockSetStatus) Expect(ctx context.Context, orderID models.OrderID, status models.Status) *mOrderStatusSetterMockSetStatus {
	if mmSetStatus.mock.funcSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("OrderStatusSetterMock.SetStatus mock is already set by Set")
	}

	if mmSetStatus.defaultExpectation == nil {
		mmSetStatus.defaultExpectation = &OrderStatusSetterMockSetStatusExpectation{}
	}

	mmSetStatus.defaultExpectation.params = &OrderStatusSetterMockSetStatusParams{ctx, orderID, status}
	for _, e := range mmSetStatus.expectations {
		if minimock.Equal(e.params, mmSetStatus.defaultExpectation.params) {
			mmSetStatus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetStatus.defaultExpectation.params)
		}
	}

	return mmSetStatus
}

// Inspect accepts an inspector function that has same arguments as the OrderStatusSetter.SetStatus
func (mmSetStatus *mOrderStatusSetterMockSetStatus) Inspect(f func(ctx context.Context, orderID models.OrderID, status models.Status)) *mOrderStatusSetterMockSetStatus {
	if mmSetStatus.mock.inspectFuncSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("Inspect function is already set for OrderStatusSetterMock.SetStatus")
	}

	mmSetStatus.mock.inspectFuncSetStatus = f

	return mmSetStatus
}

// Return sets up results that will be returned by OrderStatusSetter.SetStatus
func (mmSetStatus *mOrderStatusSetterMockSetStatus) Return(err error) *OrderStatusSetterMock {
	if mmSetStatus.mock.funcSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("OrderStatusSetterMock.SetStatus mock is already set by Set")
	}

	if mmSetStatus.defaultExpectation == nil {
		mmSetStatus.defaultExpectation = &OrderStatusSetterMockSetStatusExpectation{mock: mmSetStatus.mock}
	}
	mmSetStatus.defaultExpectation.results = &OrderStatusSetterMockSetStatusResults{err}
	return mmSetStatus.mock
}

// Set uses given function f to mock the OrderStatusSetter.SetStatus method
func (mmSetStatus *mOrderStatusSetterMockSetStatus) Set(f func(ctx context.Context, orderID models.OrderID, status models.Status) (err error)) *OrderStatusSetterMock {
	if mmSetStatus.defaultExpectation != nil {
		mmSetStatus.mock.t.Fatalf("Default expectation is already set for the OrderStatusSetter.SetStatus method")
	}

	if len(mmSetStatus.expectations) > 0 {
		mmSetStatus.mock.t.Fatalf("Some expectations are already set for the OrderStatusSetter.SetStatus method")
	}

	mmSetStatus.mock.funcSetStatus = f
	return mmSetStatus.mock
}

// When sets expectation for the OrderStatusSetter.SetStatus which will trigger the result defined by the following
// Then helper
func (mmSetStatus *mOrderStatusSetterMockSetStatus) When(ctx context.Context, orderID models.OrderID, status models.Status) *OrderStatusSetterMockSetStatusExpectation {
	if mmSetStatus.mock.funcSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("OrderStatusSetterMock.SetStatus mock is already set by Set")
	}

	expectation := &OrderStatusSetterMockSetStatusExpectation{
		mock:   mmSetStatus.mock,
		params: &OrderStatusSetterMockSetStatusParams{ctx, orderID, status},
	}
	mmSetStatus.expectations = append(mmSetStatus.expectations, expectation)
	return expectation
}

// Then sets up OrderStatusSetter.SetStatus return parameters for the expectation previously defined by the When method
func (e *OrderStatusSetterMockSetStatusExpectation) Then(err error) *OrderStatusSetterMock {
	e.results = &OrderStatusSetterMockSetStatusResults{err}
	return e.mock
}

// SetStatus implements order.OrderStatusSetter
func (mmSetStatus *OrderStatusSetterMock) SetStatus(ctx context.Context, orderID models.OrderID, status models.Status) (err error) {
	mm_atomic.AddUint64(&mmSetStatus.beforeSetStatusCounter, 1)
	defer mm_atomic.AddUint64(&mmSetStatus.afterSetStatusCounter, 1)

	if mmSetStatus.inspectFuncSetStatus != nil {
		mmSetStatus.inspectFuncSetStatus(ctx, orderID, status)
	}

	mm_params := &OrderStatusSetterMockSetStatusParams{ctx, orderID, status}

	// Record call args
	mmSetStatus.SetStatusMock.mutex.Lock()
	mmSetStatus.SetStatusMock.callArgs = append(mmSetStatus.SetStatusMock.callArgs, mm_params)
	mmSetStatus.SetStatusMock.mutex.Unlock()

	for _, e := range mmSetStatus.SetStatusMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetStatus.SetStatusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetStatus.SetStatusMock.defaultExpectation.Counter, 1)
		mm_want := mmSetStatus.SetStatusMock.defaultExpectation.params
		mm_got := OrderStatusSetterMockSetStatusParams{ctx, orderID, status}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetStatus.t.Errorf("OrderStatusSetterMock.SetStatus got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetStatus.SetStatusMock.defaultExpectation.results
		if mm_results == nil {
			mmSetStatus.t.Fatal("No results are set for the OrderStatusSetterMock.SetStatus")
		}
		return (*mm_results).err
	}
	if mmSetStatus.funcSetStatus != nil {
		return mmSetStatus.funcSetStatus(ctx, orderID, status)
	}
	mmSetStatus.t.Fatalf("Unexpected call to OrderStatusSetterMock.SetStatus. %v %v %v", ctx, orderID, status)
	return
}

// SetStatusAfterCounter returns a count of finished OrderStatusSetterMock.SetStatus invocations
func (mmSetStatus *OrderStatusSetterMock) SetStatusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetStatus.afterSetStatusCounter)
}

// SetStatusBeforeCounter returns a count of OrderStatusSetterMock.SetStatus invocations
func (mmSetStatus *OrderStatusSetterMock) SetStatusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetStatus.beforeSetStatusCounter)
}

// Calls returns a list of arguments used in each call to OrderStatusSetterMock.SetStatus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetStatus *mOrderStatusSetterMockSetStatus) Calls() []*OrderStatusSetterMockSetStatusParams {
	mmSetStatus.mutex.RLock()

	argCopy := make([]*OrderStatusSetterMockSetStatusParams, len(mmSetStatus.callArgs))
	copy(argCopy, mmSetStatus.callArgs)

	mmSetStatus.mutex.RUnlock()

	return argCopy
}

// MinimockSetStatusDone returns true if the count of the SetStatus invocations corresponds
// the number of defined expectations
func (m *OrderStatusSetterMock) MinimockSetStatusDone() bool {
	for _, e := range m.SetStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetStatusMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetStatus != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetStatusInspect logs each unmet expectation
func (m *OrderStatusSetterMock) MinimockSetStatusInspect() {
	for _, e := range m.SetStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderStatusSetterMock.SetStatus with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetStatusMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		if m.SetStatusMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderStatusSetterMock.SetStatus")
		} else {
			m.t.Errorf("Expected call to OrderStatusSetterMock.SetStatus with params: %#v", *m.SetStatusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetStatus != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		m.t.Error("Expected call to OrderStatusSetterMock.SetStatus")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderStatusSetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSetStatusInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderStatusSetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderStatusSetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetStatusDone()
}
