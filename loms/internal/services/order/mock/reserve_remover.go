package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/loms/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ReserveRemoverMock implements order.ReserveRemover
type ReserveRemoverMock struct {
	t minimock.Tester

	funcReserveRemove          func(ctx context.Context, items []models.ItemOrderInfo) (err error)
	inspectFuncReserveRemove   func(ctx context.Context, items []models.ItemOrderInfo)
	afterReserveRemoveCounter  uint64
	beforeReserveRemoveCounter uint64
	ReserveRemoveMock          mReserveRemoverMockReserveRemove
}

// NewReserveRemoverMock returns a mock for order.ReserveRemover
func NewReserveRemoverMock(t minimock.Tester) *ReserveRemoverMock {
	m := &ReserveRemoverMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReserveRemoveMock = mReserveRemoverMockReserveRemove{mock: m}
	m.ReserveRemoveMock.callArgs = []*ReserveRemoverMockReserveRemoveParams{}

	return m
}

type mReserveRemoverMockReserveRemove struct {
	mock               *ReserveRemoverMock
	defaultExpectation *ReserveRemoverMockReserveRemoveExpectation
	expectations       []*ReserveRemoverMockReserveRemoveExpectation

	callArgs []*ReserveRemoverMockReserveRemoveParams
	mutex    sync.RWMutex
}

// ReserveRemoverMockReserveRemoveExpectation specifies expectation struct of the ReserveRemover.ReserveRemove
type ReserveRemoverMockReserveRemoveExpectation struct {
	mock    *ReserveRemoverMock
	params  *ReserveRemoverMockReserveRemoveParams
	results *ReserveRemoverMockReserveRemoveResults
	Counter uint64
}

// ReserveRemoverMockReserveRemoveParams contains parameters of the ReserveRemover.ReserveRemove
type ReserveRemoverMockReserveRemoveParams struct {
	ctx   context.Context
	items []models.ItemOrderInfo
}

// ReserveRemoverMockReserveRemoveResults contains results of the ReserveRemover.ReserveRemove
type ReserveRemoverMockReserveRemoveResults struct {
	err error
}

// Expect sets up expected params for ReserveRemover.ReserveRemove
func (mmReserveRemove *mReserveRemoverMockReserveRemove) Expect(ctx context.Context, items []models.ItemOrderInfo) *mReserveRemoverMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("ReserveRemoverMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &ReserveRemoverMockReserveRemoveExpectation{}
	}

	mmReserveRemove.defaultExpectation.params = &ReserveRemoverMockReserveRemoveParams{ctx, items}
	for _, e := range mmReserveRemove.expectations {
		if minimock.Equal(e.params, mmReserveRemove.defaultExpectation.params) {
			mmReserveRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveRemove.defaultExpectation.params)
		}
	}

	return mmReserveRemove
}

// Inspect accepts an inspector function that has same arguments as the ReserveRemover.ReserveRemove
func (mmReserveRemove *mReserveRemoverMockReserveRemove) Inspect(f func(ctx context.Context, items []models.ItemOrderInfo)) *mReserveRemoverMockReserveRemove {
	if mmReserveRemove.mock.inspectFuncReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("Inspect function is already set for ReserveRemoverMock.ReserveRemove")
	}

	mmReserveRemove.mock.inspectFuncReserveRemove = f

	return mmReserveRemove
}

// Return sets up results that will be returned by ReserveRemover.ReserveRemove
func (mmReserveRemove *mReserveRemoverMockReserveRemove) Return(err error) *ReserveRemoverMock {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("ReserveRemoverMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &ReserveRemoverMockReserveRemoveExpectation{mock: mmReserveRemove.mock}
	}
	mmReserveRemove.defaultExpectation.results = &ReserveRemoverMockReserveRemoveResults{err}
	return mmReserveRemove.mock
}

// Set uses given function f to mock the ReserveRemover.ReserveRemove method
func (mmReserveRemove *mReserveRemoverMockReserveRemove) Set(f func(ctx context.Context, items []models.ItemOrderInfo) (err error)) *ReserveRemoverMock {
	if mmReserveRemove.defaultExpectation != nil {
		mmReserveRemove.mock.t.Fatalf("Default expectation is already set for the ReserveRemover.ReserveRemove method")
	}

	if len(mmReserveRemove.expectations) > 0 {
		mmReserveRemove.mock.t.Fatalf("Some expectations are already set for the ReserveRemover.ReserveRemove method")
	}

	mmReserveRemove.mock.funcReserveRemove = f
	return mmReserveRemove.mock
}

// When sets expectation for the ReserveRemover.ReserveRemove which will trigger the result defined by the following
// Then helper
func (mmReserveRemove *mReserveRemoverMockReserveRemove) When(ctx context.Context, items []models.ItemOrderInfo) *ReserveRemoverMockReserveRemoveExpectation {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("ReserveRemoverMock.ReserveRemove mock is already set by Set")
	}

	expectation := &ReserveRemoverMockReserveRemoveExpectation{
		mock:   mmReserveRemove.mock,
		params: &ReserveRemoverMockReserveRemoveParams{ctx, items},
	}
	mmReserveRemove.expectations = append(mmReserveRemove.expectations, expectation)
	return expectation
}

// Then sets up ReserveRemover.ReserveRemove return parameters for the expectation previously defined by the When method
func (e *ReserveRemoverMockReserveRemoveExpectation) Then(err error) *ReserveRemoverMock {
	e.results = &ReserveRemoverMockReserveRemoveResults{err}
	return e.mock
}

// ReserveRemove implements order.ReserveRemover
func (mmReserveRemove *ReserveRemoverMock) ReserveRemove(ctx context.Context, items []models.ItemOrderInfo) (err error) {
	mm_atomic.AddUint64(&mmReserveRemove.beforeReserveRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveRemove.afterReserveRemoveCounter, 1)

	if mmReserveRemove.inspectFuncReserveRemove != nil {
		mmReserveRemove.inspectFuncReserveRemove(ctx, items)
	}

	mm_params := &ReserveRemoverMockReserveRemoveParams{ctx, items}

	// Record call args
	mmReserveRemove.ReserveRemoveMock.mutex.Lock()
	mmReserveRemove.ReserveRemoveMock.callArgs = append(mmReserveRemove.ReserveRemoveMock.callArgs, mm_params)
	mmReserveRemove.ReserveRemoveMock.mutex.Unlock()

	for _, e := range mmReserveRemove.ReserveRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveRemove.ReserveRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveRemove.ReserveRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveRemove.ReserveRemoveMock.defaultExpectation.params
		mm_got := ReserveRemoverMockReserveRemoveParams{ctx, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveRemove.t.Errorf("ReserveRemoverMock.ReserveRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveRemove.ReserveRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveRemove.t.Fatal("No results are set for the ReserveRemoverMock.ReserveRemove")
		}
		return (*mm_results).err
	}
	if mmReserveRemove.funcReserveRemove != nil {
		return mmReserveRemove.funcReserveRemove(ctx, items)
	}
	mmReserveRemove.t.Fatalf("Unexpected call to ReserveRemoverMock.ReserveRemove. %v %v", ctx, items)
	return
}

// ReserveRemoveAfterCounter returns a count of finished ReserveRemoverMock.ReserveRemove invocations
func (mmReserveRemove *ReserveRemoverMock) ReserveRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.afterReserveRemoveCounter)
}

// ReserveRemoveBeforeCounter returns a count of ReserveRemoverMock.ReserveRemove invocations
func (mmReserveRemove *ReserveRemoverMock) ReserveRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.beforeReserveRemoveCounter)
}

// Calls returns a list of arguments used in each call to ReserveRemoverMock.ReserveRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveRemove *mReserveRemoverMockReserveRemove) Calls() []*ReserveRemoverMockReserveRemoveParams {
	mmReserveRemove.mutex.RLock()

	argCopy := make([]*ReserveRemoverMockReserveRemoveParams, len(mmReserveRemove.callArgs))
	copy(argCopy, mmReserveRemove.callArgs)

	mmReserveRemove.mutex.RUnlock()

	return argCopy
}

// MinimockReserveRemoveDone returns true if the count of the ReserveRemove invocations corresponds
// the number of defined expectations
func (m *ReserveRemoverMock) MinimockReserveRemoveDone() bool {
	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReserveRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveRemove != nil && mm_atomic.LoadUint64(&m.afterReserveRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockReserveRemoveInspect logs each unmet expectation
func (m *ReserveRemoverMock) MinimockReserveRemoveInspect() {
	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReserveRemoverMock.ReserveRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReserveRemoveCounter) < 1 {
		if m.ReserveRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ReserveRemoverMock.ReserveRemove")
		} else {
			m.t.Errorf("Expected call to ReserveRemoverMock.ReserveRemove with params: %#v", *m.ReserveRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveRemove != nil && mm_atomic.LoadUint64(&m.afterReserveRemoveCounter) < 1 {
		m.t.Error("Expected call to ReserveRemoverMock.ReserveRemove")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReserveRemoverMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockReserveRemoveInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReserveRemoverMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReserveRemoverMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReserveRemoveDone()
}
