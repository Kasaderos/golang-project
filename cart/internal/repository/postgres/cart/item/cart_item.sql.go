// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: cart_item.sql

package cart

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCartItem = `-- name: AddCartItem :exec
insert into cart_item (
    user_id,
    sku,
    name,
    price,
    count
) VALUES ($1, $2, $3, $4, $5)
`

type AddCartItemParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Sku    pgtype.Int8 `json:"sku"`
	Name   pgtype.Text `json:"name"`
	Price  pgtype.Int4 `json:"price"`
	Count  pgtype.Int4 `json:"count"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) error {
	_, err := q.db.Exec(ctx, addCartItem,
		arg.UserID,
		arg.Sku,
		arg.Name,
		arg.Price,
		arg.Count,
	)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
delete from cart_item 
where user_id = $1 and sku = $2
`

type DeleteItemParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Sku    pgtype.Int8 `json:"sku"`
}

func (q *Queries) DeleteItem(ctx context.Context, arg DeleteItemParams) error {
	_, err := q.db.Exec(ctx, deleteItem, arg.UserID, arg.Sku)
	return err
}

const deleteItemByUser = `-- name: DeleteItemByUser :exec
delete from cart_item 
where user_id = $1
`

func (q *Queries) DeleteItemByUser(ctx context.Context, userID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteItemByUser, userID)
	return err
}

const getItemsByUserID = `-- name: GetItemsByUserID :many
select user_id, sku, name, price, count from cart_item 
where user_id = $1
`

func (q *Queries) GetItemsByUserID(ctx context.Context, userID pgtype.Int8) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, getItemsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.UserID,
			&i.Sku,
			&i.Name,
			&i.Price,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
