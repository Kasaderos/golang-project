package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ItemsProviderMock implements cart.ItemsProvider
type ItemsProviderMock struct {
	t minimock.Tester

	funcGetItemsByUserID          func(ctx context.Context, userID models.UserID) (ca1 []models.CartItem, err error)
	inspectFuncGetItemsByUserID   func(ctx context.Context, userID models.UserID)
	afterGetItemsByUserIDCounter  uint64
	beforeGetItemsByUserIDCounter uint64
	GetItemsByUserIDMock          mItemsProviderMockGetItemsByUserID
}

// NewItemsProviderMock returns a mock for cart.ItemsProvider
func NewItemsProviderMock(t minimock.Tester) *ItemsProviderMock {
	m := &ItemsProviderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetItemsByUserIDMock = mItemsProviderMockGetItemsByUserID{mock: m}
	m.GetItemsByUserIDMock.callArgs = []*ItemsProviderMockGetItemsByUserIDParams{}

	return m
}

type mItemsProviderMockGetItemsByUserID struct {
	mock               *ItemsProviderMock
	defaultExpectation *ItemsProviderMockGetItemsByUserIDExpectation
	expectations       []*ItemsProviderMockGetItemsByUserIDExpectation

	callArgs []*ItemsProviderMockGetItemsByUserIDParams
	mutex    sync.RWMutex
}

// ItemsProviderMockGetItemsByUserIDExpectation specifies expectation struct of the ItemsProvider.GetItemsByUserID
type ItemsProviderMockGetItemsByUserIDExpectation struct {
	mock    *ItemsProviderMock
	params  *ItemsProviderMockGetItemsByUserIDParams
	results *ItemsProviderMockGetItemsByUserIDResults
	Counter uint64
}

// ItemsProviderMockGetItemsByUserIDParams contains parameters of the ItemsProvider.GetItemsByUserID
type ItemsProviderMockGetItemsByUserIDParams struct {
	ctx    context.Context
	userID models.UserID
}

// ItemsProviderMockGetItemsByUserIDResults contains results of the ItemsProvider.GetItemsByUserID
type ItemsProviderMockGetItemsByUserIDResults struct {
	ca1 []models.CartItem
	err error
}

// Expect sets up expected params for ItemsProvider.GetItemsByUserID
func (mmGetItemsByUserID *mItemsProviderMockGetItemsByUserID) Expect(ctx context.Context, userID models.UserID) *mItemsProviderMockGetItemsByUserID {
	if mmGetItemsByUserID.mock.funcGetItemsByUserID != nil {
		mmGetItemsByUserID.mock.t.Fatalf("ItemsProviderMock.GetItemsByUserID mock is already set by Set")
	}

	if mmGetItemsByUserID.defaultExpectation == nil {
		mmGetItemsByUserID.defaultExpectation = &ItemsProviderMockGetItemsByUserIDExpectation{}
	}

	mmGetItemsByUserID.defaultExpectation.params = &ItemsProviderMockGetItemsByUserIDParams{ctx, userID}
	for _, e := range mmGetItemsByUserID.expectations {
		if minimock.Equal(e.params, mmGetItemsByUserID.defaultExpectation.params) {
			mmGetItemsByUserID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetItemsByUserID.defaultExpectation.params)
		}
	}

	return mmGetItemsByUserID
}

// Inspect accepts an inspector function that has same arguments as the ItemsProvider.GetItemsByUserID
func (mmGetItemsByUserID *mItemsProviderMockGetItemsByUserID) Inspect(f func(ctx context.Context, userID models.UserID)) *mItemsProviderMockGetItemsByUserID {
	if mmGetItemsByUserID.mock.inspectFuncGetItemsByUserID != nil {
		mmGetItemsByUserID.mock.t.Fatalf("Inspect function is already set for ItemsProviderMock.GetItemsByUserID")
	}

	mmGetItemsByUserID.mock.inspectFuncGetItemsByUserID = f

	return mmGetItemsByUserID
}

// Return sets up results that will be returned by ItemsProvider.GetItemsByUserID
func (mmGetItemsByUserID *mItemsProviderMockGetItemsByUserID) Return(ca1 []models.CartItem, err error) *ItemsProviderMock {
	if mmGetItemsByUserID.mock.funcGetItemsByUserID != nil {
		mmGetItemsByUserID.mock.t.Fatalf("ItemsProviderMock.GetItemsByUserID mock is already set by Set")
	}

	if mmGetItemsByUserID.defaultExpectation == nil {
		mmGetItemsByUserID.defaultExpectation = &ItemsProviderMockGetItemsByUserIDExpectation{mock: mmGetItemsByUserID.mock}
	}
	mmGetItemsByUserID.defaultExpectation.results = &ItemsProviderMockGetItemsByUserIDResults{ca1, err}
	return mmGetItemsByUserID.mock
}

// Set uses given function f to mock the ItemsProvider.GetItemsByUserID method
func (mmGetItemsByUserID *mItemsProviderMockGetItemsByUserID) Set(f func(ctx context.Context, userID models.UserID) (ca1 []models.CartItem, err error)) *ItemsProviderMock {
	if mmGetItemsByUserID.defaultExpectation != nil {
		mmGetItemsByUserID.mock.t.Fatalf("Default expectation is already set for the ItemsProvider.GetItemsByUserID method")
	}

	if len(mmGetItemsByUserID.expectations) > 0 {
		mmGetItemsByUserID.mock.t.Fatalf("Some expectations are already set for the ItemsProvider.GetItemsByUserID method")
	}

	mmGetItemsByUserID.mock.funcGetItemsByUserID = f
	return mmGetItemsByUserID.mock
}

// When sets expectation for the ItemsProvider.GetItemsByUserID which will trigger the result defined by the following
// Then helper
func (mmGetItemsByUserID *mItemsProviderMockGetItemsByUserID) When(ctx context.Context, userID models.UserID) *ItemsProviderMockGetItemsByUserIDExpectation {
	if mmGetItemsByUserID.mock.funcGetItemsByUserID != nil {
		mmGetItemsByUserID.mock.t.Fatalf("ItemsProviderMock.GetItemsByUserID mock is already set by Set")
	}

	expectation := &ItemsProviderMockGetItemsByUserIDExpectation{
		mock:   mmGetItemsByUserID.mock,
		params: &ItemsProviderMockGetItemsByUserIDParams{ctx, userID},
	}
	mmGetItemsByUserID.expectations = append(mmGetItemsByUserID.expectations, expectation)
	return expectation
}

// Then sets up ItemsProvider.GetItemsByUserID return parameters for the expectation previously defined by the When method
func (e *ItemsProviderMockGetItemsByUserIDExpectation) Then(ca1 []models.CartItem, err error) *ItemsProviderMock {
	e.results = &ItemsProviderMockGetItemsByUserIDResults{ca1, err}
	return e.mock
}

// GetItemsByUserID implements cart.ItemsProvider
func (mmGetItemsByUserID *ItemsProviderMock) GetItemsByUserID(ctx context.Context, userID models.UserID) (ca1 []models.CartItem, err error) {
	mm_atomic.AddUint64(&mmGetItemsByUserID.beforeGetItemsByUserIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetItemsByUserID.afterGetItemsByUserIDCounter, 1)

	if mmGetItemsByUserID.inspectFuncGetItemsByUserID != nil {
		mmGetItemsByUserID.inspectFuncGetItemsByUserID(ctx, userID)
	}

	mm_params := &ItemsProviderMockGetItemsByUserIDParams{ctx, userID}

	// Record call args
	mmGetItemsByUserID.GetItemsByUserIDMock.mutex.Lock()
	mmGetItemsByUserID.GetItemsByUserIDMock.callArgs = append(mmGetItemsByUserID.GetItemsByUserIDMock.callArgs, mm_params)
	mmGetItemsByUserID.GetItemsByUserIDMock.mutex.Unlock()

	for _, e := range mmGetItemsByUserID.GetItemsByUserIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmGetItemsByUserID.GetItemsByUserIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetItemsByUserID.GetItemsByUserIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetItemsByUserID.GetItemsByUserIDMock.defaultExpectation.params
		mm_got := ItemsProviderMockGetItemsByUserIDParams{ctx, userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetItemsByUserID.t.Errorf("ItemsProviderMock.GetItemsByUserID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetItemsByUserID.GetItemsByUserIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetItemsByUserID.t.Fatal("No results are set for the ItemsProviderMock.GetItemsByUserID")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmGetItemsByUserID.funcGetItemsByUserID != nil {
		return mmGetItemsByUserID.funcGetItemsByUserID(ctx, userID)
	}
	mmGetItemsByUserID.t.Fatalf("Unexpected call to ItemsProviderMock.GetItemsByUserID. %v %v", ctx, userID)
	return
}

// GetItemsByUserIDAfterCounter returns a count of finished ItemsProviderMock.GetItemsByUserID invocations
func (mmGetItemsByUserID *ItemsProviderMock) GetItemsByUserIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItemsByUserID.afterGetItemsByUserIDCounter)
}

// GetItemsByUserIDBeforeCounter returns a count of ItemsProviderMock.GetItemsByUserID invocations
func (mmGetItemsByUserID *ItemsProviderMock) GetItemsByUserIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetItemsByUserID.beforeGetItemsByUserIDCounter)
}

// Calls returns a list of arguments used in each call to ItemsProviderMock.GetItemsByUserID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetItemsByUserID *mItemsProviderMockGetItemsByUserID) Calls() []*ItemsProviderMockGetItemsByUserIDParams {
	mmGetItemsByUserID.mutex.RLock()

	argCopy := make([]*ItemsProviderMockGetItemsByUserIDParams, len(mmGetItemsByUserID.callArgs))
	copy(argCopy, mmGetItemsByUserID.callArgs)

	mmGetItemsByUserID.mutex.RUnlock()

	return argCopy
}

// MinimockGetItemsByUserIDDone returns true if the count of the GetItemsByUserID invocations corresponds
// the number of defined expectations
func (m *ItemsProviderMock) MinimockGetItemsByUserIDDone() bool {
	for _, e := range m.GetItemsByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemsByUserIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetItemsByUserIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItemsByUserID != nil && mm_atomic.LoadUint64(&m.afterGetItemsByUserIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetItemsByUserIDInspect logs each unmet expectation
func (m *ItemsProviderMock) MinimockGetItemsByUserIDInspect() {
	for _, e := range m.GetItemsByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ItemsProviderMock.GetItemsByUserID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetItemsByUserIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetItemsByUserIDCounter) < 1 {
		if m.GetItemsByUserIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ItemsProviderMock.GetItemsByUserID")
		} else {
			m.t.Errorf("Expected call to ItemsProviderMock.GetItemsByUserID with params: %#v", *m.GetItemsByUserIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetItemsByUserID != nil && mm_atomic.LoadUint64(&m.afterGetItemsByUserIDCounter) < 1 {
		m.t.Error("Expected call to ItemsProviderMock.GetItemsByUserID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ItemsProviderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetItemsByUserIDInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ItemsProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ItemsProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetItemsByUserIDDone()
}
