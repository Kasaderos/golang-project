package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ItemDeleterMock implements cart.ItemDeleter
type ItemDeleterMock struct {
	t minimock.Tester

	funcDeleteItem          func(ctx context.Context, userID models.UserID, SKU models.SKU) (err error)
	inspectFuncDeleteItem   func(ctx context.Context, userID models.UserID, SKU models.SKU)
	afterDeleteItemCounter  uint64
	beforeDeleteItemCounter uint64
	DeleteItemMock          mItemDeleterMockDeleteItem
}

// NewItemDeleterMock returns a mock for cart.ItemDeleter
func NewItemDeleterMock(t minimock.Tester) *ItemDeleterMock {
	m := &ItemDeleterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteItemMock = mItemDeleterMockDeleteItem{mock: m}
	m.DeleteItemMock.callArgs = []*ItemDeleterMockDeleteItemParams{}

	return m
}

type mItemDeleterMockDeleteItem struct {
	mock               *ItemDeleterMock
	defaultExpectation *ItemDeleterMockDeleteItemExpectation
	expectations       []*ItemDeleterMockDeleteItemExpectation

	callArgs []*ItemDeleterMockDeleteItemParams
	mutex    sync.RWMutex
}

// ItemDeleterMockDeleteItemExpectation specifies expectation struct of the ItemDeleter.DeleteItem
type ItemDeleterMockDeleteItemExpectation struct {
	mock    *ItemDeleterMock
	params  *ItemDeleterMockDeleteItemParams
	results *ItemDeleterMockDeleteItemResults
	Counter uint64
}

// ItemDeleterMockDeleteItemParams contains parameters of the ItemDeleter.DeleteItem
type ItemDeleterMockDeleteItemParams struct {
	ctx    context.Context
	userID models.UserID
	SKU    models.SKU
}

// ItemDeleterMockDeleteItemResults contains results of the ItemDeleter.DeleteItem
type ItemDeleterMockDeleteItemResults struct {
	err error
}

// Expect sets up expected params for ItemDeleter.DeleteItem
func (mmDeleteItem *mItemDeleterMockDeleteItem) Expect(ctx context.Context, userID models.UserID, SKU models.SKU) *mItemDeleterMockDeleteItem {
	if mmDeleteItem.mock.funcDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("ItemDeleterMock.DeleteItem mock is already set by Set")
	}

	if mmDeleteItem.defaultExpectation == nil {
		mmDeleteItem.defaultExpectation = &ItemDeleterMockDeleteItemExpectation{}
	}

	mmDeleteItem.defaultExpectation.params = &ItemDeleterMockDeleteItemParams{ctx, userID, SKU}
	for _, e := range mmDeleteItem.expectations {
		if minimock.Equal(e.params, mmDeleteItem.defaultExpectation.params) {
			mmDeleteItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteItem.defaultExpectation.params)
		}
	}

	return mmDeleteItem
}

// Inspect accepts an inspector function that has same arguments as the ItemDeleter.DeleteItem
func (mmDeleteItem *mItemDeleterMockDeleteItem) Inspect(f func(ctx context.Context, userID models.UserID, SKU models.SKU)) *mItemDeleterMockDeleteItem {
	if mmDeleteItem.mock.inspectFuncDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("Inspect function is already set for ItemDeleterMock.DeleteItem")
	}

	mmDeleteItem.mock.inspectFuncDeleteItem = f

	return mmDeleteItem
}

// Return sets up results that will be returned by ItemDeleter.DeleteItem
func (mmDeleteItem *mItemDeleterMockDeleteItem) Return(err error) *ItemDeleterMock {
	if mmDeleteItem.mock.funcDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("ItemDeleterMock.DeleteItem mock is already set by Set")
	}

	if mmDeleteItem.defaultExpectation == nil {
		mmDeleteItem.defaultExpectation = &ItemDeleterMockDeleteItemExpectation{mock: mmDeleteItem.mock}
	}
	mmDeleteItem.defaultExpectation.results = &ItemDeleterMockDeleteItemResults{err}
	return mmDeleteItem.mock
}

// Set uses given function f to mock the ItemDeleter.DeleteItem method
func (mmDeleteItem *mItemDeleterMockDeleteItem) Set(f func(ctx context.Context, userID models.UserID, SKU models.SKU) (err error)) *ItemDeleterMock {
	if mmDeleteItem.defaultExpectation != nil {
		mmDeleteItem.mock.t.Fatalf("Default expectation is already set for the ItemDeleter.DeleteItem method")
	}

	if len(mmDeleteItem.expectations) > 0 {
		mmDeleteItem.mock.t.Fatalf("Some expectations are already set for the ItemDeleter.DeleteItem method")
	}

	mmDeleteItem.mock.funcDeleteItem = f
	return mmDeleteItem.mock
}

// When sets expectation for the ItemDeleter.DeleteItem which will trigger the result defined by the following
// Then helper
func (mmDeleteItem *mItemDeleterMockDeleteItem) When(ctx context.Context, userID models.UserID, SKU models.SKU) *ItemDeleterMockDeleteItemExpectation {
	if mmDeleteItem.mock.funcDeleteItem != nil {
		mmDeleteItem.mock.t.Fatalf("ItemDeleterMock.DeleteItem mock is already set by Set")
	}

	expectation := &ItemDeleterMockDeleteItemExpectation{
		mock:   mmDeleteItem.mock,
		params: &ItemDeleterMockDeleteItemParams{ctx, userID, SKU},
	}
	mmDeleteItem.expectations = append(mmDeleteItem.expectations, expectation)
	return expectation
}

// Then sets up ItemDeleter.DeleteItem return parameters for the expectation previously defined by the When method
func (e *ItemDeleterMockDeleteItemExpectation) Then(err error) *ItemDeleterMock {
	e.results = &ItemDeleterMockDeleteItemResults{err}
	return e.mock
}

// DeleteItem implements cart.ItemDeleter
func (mmDeleteItem *ItemDeleterMock) DeleteItem(ctx context.Context, userID models.UserID, SKU models.SKU) (err error) {
	mm_atomic.AddUint64(&mmDeleteItem.beforeDeleteItemCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteItem.afterDeleteItemCounter, 1)

	if mmDeleteItem.inspectFuncDeleteItem != nil {
		mmDeleteItem.inspectFuncDeleteItem(ctx, userID, SKU)
	}

	mm_params := &ItemDeleterMockDeleteItemParams{ctx, userID, SKU}

	// Record call args
	mmDeleteItem.DeleteItemMock.mutex.Lock()
	mmDeleteItem.DeleteItemMock.callArgs = append(mmDeleteItem.DeleteItemMock.callArgs, mm_params)
	mmDeleteItem.DeleteItemMock.mutex.Unlock()

	for _, e := range mmDeleteItem.DeleteItemMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteItem.DeleteItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteItem.DeleteItemMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteItem.DeleteItemMock.defaultExpectation.params
		mm_got := ItemDeleterMockDeleteItemParams{ctx, userID, SKU}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteItem.t.Errorf("ItemDeleterMock.DeleteItem got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteItem.DeleteItemMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteItem.t.Fatal("No results are set for the ItemDeleterMock.DeleteItem")
		}
		return (*mm_results).err
	}
	if mmDeleteItem.funcDeleteItem != nil {
		return mmDeleteItem.funcDeleteItem(ctx, userID, SKU)
	}
	mmDeleteItem.t.Fatalf("Unexpected call to ItemDeleterMock.DeleteItem. %v %v %v", ctx, userID, SKU)
	return
}

// DeleteItemAfterCounter returns a count of finished ItemDeleterMock.DeleteItem invocations
func (mmDeleteItem *ItemDeleterMock) DeleteItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItem.afterDeleteItemCounter)
}

// DeleteItemBeforeCounter returns a count of ItemDeleterMock.DeleteItem invocations
func (mmDeleteItem *ItemDeleterMock) DeleteItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItem.beforeDeleteItemCounter)
}

// Calls returns a list of arguments used in each call to ItemDeleterMock.DeleteItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteItem *mItemDeleterMockDeleteItem) Calls() []*ItemDeleterMockDeleteItemParams {
	mmDeleteItem.mutex.RLock()

	argCopy := make([]*ItemDeleterMockDeleteItemParams, len(mmDeleteItem.callArgs))
	copy(argCopy, mmDeleteItem.callArgs)

	mmDeleteItem.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteItemDone returns true if the count of the DeleteItem invocations corresponds
// the number of defined expectations
func (m *ItemDeleterMock) MinimockDeleteItemDone() bool {
	for _, e := range m.DeleteItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteItem != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteItemInspect logs each unmet expectation
func (m *ItemDeleterMock) MinimockDeleteItemInspect() {
	for _, e := range m.DeleteItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ItemDeleterMock.DeleteItem with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		if m.DeleteItemMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ItemDeleterMock.DeleteItem")
		} else {
			m.t.Errorf("Expected call to ItemDeleterMock.DeleteItem with params: %#v", *m.DeleteItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteItem != nil && mm_atomic.LoadUint64(&m.afterDeleteItemCounter) < 1 {
		m.t.Error("Expected call to ItemDeleterMock.DeleteItem")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ItemDeleterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteItemInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ItemDeleterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ItemDeleterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteItemDone()
}
