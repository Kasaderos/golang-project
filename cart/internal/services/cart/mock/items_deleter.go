package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ItemsDeleterMock implements cart.ItemsDeleter
type ItemsDeleterMock struct {
	t minimock.Tester

	funcDeleteItemsByUserID          func(ctx context.Context, userID models.UserID) (err error)
	inspectFuncDeleteItemsByUserID   func(ctx context.Context, userID models.UserID)
	afterDeleteItemsByUserIDCounter  uint64
	beforeDeleteItemsByUserIDCounter uint64
	DeleteItemsByUserIDMock          mItemsDeleterMockDeleteItemsByUserID
}

// NewItemsDeleterMock returns a mock for cart.ItemsDeleter
func NewItemsDeleterMock(t minimock.Tester) *ItemsDeleterMock {
	m := &ItemsDeleterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteItemsByUserIDMock = mItemsDeleterMockDeleteItemsByUserID{mock: m}
	m.DeleteItemsByUserIDMock.callArgs = []*ItemsDeleterMockDeleteItemsByUserIDParams{}

	return m
}

type mItemsDeleterMockDeleteItemsByUserID struct {
	mock               *ItemsDeleterMock
	defaultExpectation *ItemsDeleterMockDeleteItemsByUserIDExpectation
	expectations       []*ItemsDeleterMockDeleteItemsByUserIDExpectation

	callArgs []*ItemsDeleterMockDeleteItemsByUserIDParams
	mutex    sync.RWMutex
}

// ItemsDeleterMockDeleteItemsByUserIDExpectation specifies expectation struct of the ItemsDeleter.DeleteItemsByUserID
type ItemsDeleterMockDeleteItemsByUserIDExpectation struct {
	mock    *ItemsDeleterMock
	params  *ItemsDeleterMockDeleteItemsByUserIDParams
	results *ItemsDeleterMockDeleteItemsByUserIDResults
	Counter uint64
}

// ItemsDeleterMockDeleteItemsByUserIDParams contains parameters of the ItemsDeleter.DeleteItemsByUserID
type ItemsDeleterMockDeleteItemsByUserIDParams struct {
	ctx    context.Context
	userID models.UserID
}

// ItemsDeleterMockDeleteItemsByUserIDResults contains results of the ItemsDeleter.DeleteItemsByUserID
type ItemsDeleterMockDeleteItemsByUserIDResults struct {
	err error
}

// Expect sets up expected params for ItemsDeleter.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mItemsDeleterMockDeleteItemsByUserID) Expect(ctx context.Context, userID models.UserID) *mItemsDeleterMockDeleteItemsByUserID {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("ItemsDeleterMock.DeleteItemsByUserID mock is already set by Set")
	}

	if mmDeleteItemsByUserID.defaultExpectation == nil {
		mmDeleteItemsByUserID.defaultExpectation = &ItemsDeleterMockDeleteItemsByUserIDExpectation{}
	}

	mmDeleteItemsByUserID.defaultExpectation.params = &ItemsDeleterMockDeleteItemsByUserIDParams{ctx, userID}
	for _, e := range mmDeleteItemsByUserID.expectations {
		if minimock.Equal(e.params, mmDeleteItemsByUserID.defaultExpectation.params) {
			mmDeleteItemsByUserID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteItemsByUserID.defaultExpectation.params)
		}
	}

	return mmDeleteItemsByUserID
}

// Inspect accepts an inspector function that has same arguments as the ItemsDeleter.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mItemsDeleterMockDeleteItemsByUserID) Inspect(f func(ctx context.Context, userID models.UserID)) *mItemsDeleterMockDeleteItemsByUserID {
	if mmDeleteItemsByUserID.mock.inspectFuncDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("Inspect function is already set for ItemsDeleterMock.DeleteItemsByUserID")
	}

	mmDeleteItemsByUserID.mock.inspectFuncDeleteItemsByUserID = f

	return mmDeleteItemsByUserID
}

// Return sets up results that will be returned by ItemsDeleter.DeleteItemsByUserID
func (mmDeleteItemsByUserID *mItemsDeleterMockDeleteItemsByUserID) Return(err error) *ItemsDeleterMock {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("ItemsDeleterMock.DeleteItemsByUserID mock is already set by Set")
	}

	if mmDeleteItemsByUserID.defaultExpectation == nil {
		mmDeleteItemsByUserID.defaultExpectation = &ItemsDeleterMockDeleteItemsByUserIDExpectation{mock: mmDeleteItemsByUserID.mock}
	}
	mmDeleteItemsByUserID.defaultExpectation.results = &ItemsDeleterMockDeleteItemsByUserIDResults{err}
	return mmDeleteItemsByUserID.mock
}

// Set uses given function f to mock the ItemsDeleter.DeleteItemsByUserID method
func (mmDeleteItemsByUserID *mItemsDeleterMockDeleteItemsByUserID) Set(f func(ctx context.Context, userID models.UserID) (err error)) *ItemsDeleterMock {
	if mmDeleteItemsByUserID.defaultExpectation != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("Default expectation is already set for the ItemsDeleter.DeleteItemsByUserID method")
	}

	if len(mmDeleteItemsByUserID.expectations) > 0 {
		mmDeleteItemsByUserID.mock.t.Fatalf("Some expectations are already set for the ItemsDeleter.DeleteItemsByUserID method")
	}

	mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID = f
	return mmDeleteItemsByUserID.mock
}

// When sets expectation for the ItemsDeleter.DeleteItemsByUserID which will trigger the result defined by the following
// Then helper
func (mmDeleteItemsByUserID *mItemsDeleterMockDeleteItemsByUserID) When(ctx context.Context, userID models.UserID) *ItemsDeleterMockDeleteItemsByUserIDExpectation {
	if mmDeleteItemsByUserID.mock.funcDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.mock.t.Fatalf("ItemsDeleterMock.DeleteItemsByUserID mock is already set by Set")
	}

	expectation := &ItemsDeleterMockDeleteItemsByUserIDExpectation{
		mock:   mmDeleteItemsByUserID.mock,
		params: &ItemsDeleterMockDeleteItemsByUserIDParams{ctx, userID},
	}
	mmDeleteItemsByUserID.expectations = append(mmDeleteItemsByUserID.expectations, expectation)
	return expectation
}

// Then sets up ItemsDeleter.DeleteItemsByUserID return parameters for the expectation previously defined by the When method
func (e *ItemsDeleterMockDeleteItemsByUserIDExpectation) Then(err error) *ItemsDeleterMock {
	e.results = &ItemsDeleterMockDeleteItemsByUserIDResults{err}
	return e.mock
}

// DeleteItemsByUserID implements cart.ItemsDeleter
func (mmDeleteItemsByUserID *ItemsDeleterMock) DeleteItemsByUserID(ctx context.Context, userID models.UserID) (err error) {
	mm_atomic.AddUint64(&mmDeleteItemsByUserID.beforeDeleteItemsByUserIDCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteItemsByUserID.afterDeleteItemsByUserIDCounter, 1)

	if mmDeleteItemsByUserID.inspectFuncDeleteItemsByUserID != nil {
		mmDeleteItemsByUserID.inspectFuncDeleteItemsByUserID(ctx, userID)
	}

	mm_params := &ItemsDeleterMockDeleteItemsByUserIDParams{ctx, userID}

	// Record call args
	mmDeleteItemsByUserID.DeleteItemsByUserIDMock.mutex.Lock()
	mmDeleteItemsByUserID.DeleteItemsByUserIDMock.callArgs = append(mmDeleteItemsByUserID.DeleteItemsByUserIDMock.callArgs, mm_params)
	mmDeleteItemsByUserID.DeleteItemsByUserIDMock.mutex.Unlock()

	for _, e := range mmDeleteItemsByUserID.DeleteItemsByUserIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation.params
		mm_got := ItemsDeleterMockDeleteItemsByUserIDParams{ctx, userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteItemsByUserID.t.Errorf("ItemsDeleterMock.DeleteItemsByUserID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteItemsByUserID.DeleteItemsByUserIDMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteItemsByUserID.t.Fatal("No results are set for the ItemsDeleterMock.DeleteItemsByUserID")
		}
		return (*mm_results).err
	}
	if mmDeleteItemsByUserID.funcDeleteItemsByUserID != nil {
		return mmDeleteItemsByUserID.funcDeleteItemsByUserID(ctx, userID)
	}
	mmDeleteItemsByUserID.t.Fatalf("Unexpected call to ItemsDeleterMock.DeleteItemsByUserID. %v %v", ctx, userID)
	return
}

// DeleteItemsByUserIDAfterCounter returns a count of finished ItemsDeleterMock.DeleteItemsByUserID invocations
func (mmDeleteItemsByUserID *ItemsDeleterMock) DeleteItemsByUserIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItemsByUserID.afterDeleteItemsByUserIDCounter)
}

// DeleteItemsByUserIDBeforeCounter returns a count of ItemsDeleterMock.DeleteItemsByUserID invocations
func (mmDeleteItemsByUserID *ItemsDeleterMock) DeleteItemsByUserIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteItemsByUserID.beforeDeleteItemsByUserIDCounter)
}

// Calls returns a list of arguments used in each call to ItemsDeleterMock.DeleteItemsByUserID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteItemsByUserID *mItemsDeleterMockDeleteItemsByUserID) Calls() []*ItemsDeleterMockDeleteItemsByUserIDParams {
	mmDeleteItemsByUserID.mutex.RLock()

	argCopy := make([]*ItemsDeleterMockDeleteItemsByUserIDParams, len(mmDeleteItemsByUserID.callArgs))
	copy(argCopy, mmDeleteItemsByUserID.callArgs)

	mmDeleteItemsByUserID.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteItemsByUserIDDone returns true if the count of the DeleteItemsByUserID invocations corresponds
// the number of defined expectations
func (m *ItemsDeleterMock) MinimockDeleteItemsByUserIDDone() bool {
	for _, e := range m.DeleteItemsByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteItemsByUserIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteItemsByUserIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteItemsByUserID != nil && mm_atomic.LoadUint64(&m.afterDeleteItemsByUserIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteItemsByUserIDInspect logs each unmet expectation
func (m *ItemsDeleterMock) MinimockDeleteItemsByUserIDInspect() {
	for _, e := range m.DeleteItemsByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ItemsDeleterMock.DeleteItemsByUserID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteItemsByUserIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteItemsByUserIDCounter) < 1 {
		if m.DeleteItemsByUserIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ItemsDeleterMock.DeleteItemsByUserID")
		} else {
			m.t.Errorf("Expected call to ItemsDeleterMock.DeleteItemsByUserID with params: %#v", *m.DeleteItemsByUserIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteItemsByUserID != nil && mm_atomic.LoadUint64(&m.afterDeleteItemsByUserIDCounter) < 1 {
		m.t.Error("Expected call to ItemsDeleterMock.DeleteItemsByUserID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ItemsDeleterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteItemsByUserIDInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ItemsDeleterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ItemsDeleterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteItemsByUserIDDone()
}
