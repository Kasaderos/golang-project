package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StockProviderMock implements cart.StockProvider
type StockProviderMock struct {
	t minimock.Tester

	funcGetStock          func(ctx context.Context, sku models.SKU) (count uint64, err error)
	inspectFuncGetStock   func(ctx context.Context, sku models.SKU)
	afterGetStockCounter  uint64
	beforeGetStockCounter uint64
	GetStockMock          mStockProviderMockGetStock
}

// NewStockProviderMock returns a mock for cart.StockProvider
func NewStockProviderMock(t minimock.Tester) *StockProviderMock {
	m := &StockProviderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetStockMock = mStockProviderMockGetStock{mock: m}
	m.GetStockMock.callArgs = []*StockProviderMockGetStockParams{}

	return m
}

type mStockProviderMockGetStock struct {
	mock               *StockProviderMock
	defaultExpectation *StockProviderMockGetStockExpectation
	expectations       []*StockProviderMockGetStockExpectation

	callArgs []*StockProviderMockGetStockParams
	mutex    sync.RWMutex
}

// StockProviderMockGetStockExpectation specifies expectation struct of the StockProvider.GetStock
type StockProviderMockGetStockExpectation struct {
	mock    *StockProviderMock
	params  *StockProviderMockGetStockParams
	results *StockProviderMockGetStockResults
	Counter uint64
}

// StockProviderMockGetStockParams contains parameters of the StockProvider.GetStock
type StockProviderMockGetStockParams struct {
	ctx context.Context
	sku models.SKU
}

// StockProviderMockGetStockResults contains results of the StockProvider.GetStock
type StockProviderMockGetStockResults struct {
	count uint64
	err   error
}

// Expect sets up expected params for StockProvider.GetStock
func (mmGetStock *mStockProviderMockGetStock) Expect(ctx context.Context, sku models.SKU) *mStockProviderMockGetStock {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("StockProviderMock.GetStock mock is already set by Set")
	}

	if mmGetStock.defaultExpectation == nil {
		mmGetStock.defaultExpectation = &StockProviderMockGetStockExpectation{}
	}

	mmGetStock.defaultExpectation.params = &StockProviderMockGetStockParams{ctx, sku}
	for _, e := range mmGetStock.expectations {
		if minimock.Equal(e.params, mmGetStock.defaultExpectation.params) {
			mmGetStock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStock.defaultExpectation.params)
		}
	}

	return mmGetStock
}

// Inspect accepts an inspector function that has same arguments as the StockProvider.GetStock
func (mmGetStock *mStockProviderMockGetStock) Inspect(f func(ctx context.Context, sku models.SKU)) *mStockProviderMockGetStock {
	if mmGetStock.mock.inspectFuncGetStock != nil {
		mmGetStock.mock.t.Fatalf("Inspect function is already set for StockProviderMock.GetStock")
	}

	mmGetStock.mock.inspectFuncGetStock = f

	return mmGetStock
}

// Return sets up results that will be returned by StockProvider.GetStock
func (mmGetStock *mStockProviderMockGetStock) Return(count uint64, err error) *StockProviderMock {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("StockProviderMock.GetStock mock is already set by Set")
	}

	if mmGetStock.defaultExpectation == nil {
		mmGetStock.defaultExpectation = &StockProviderMockGetStockExpectation{mock: mmGetStock.mock}
	}
	mmGetStock.defaultExpectation.results = &StockProviderMockGetStockResults{count, err}
	return mmGetStock.mock
}

// Set uses given function f to mock the StockProvider.GetStock method
func (mmGetStock *mStockProviderMockGetStock) Set(f func(ctx context.Context, sku models.SKU) (count uint64, err error)) *StockProviderMock {
	if mmGetStock.defaultExpectation != nil {
		mmGetStock.mock.t.Fatalf("Default expectation is already set for the StockProvider.GetStock method")
	}

	if len(mmGetStock.expectations) > 0 {
		mmGetStock.mock.t.Fatalf("Some expectations are already set for the StockProvider.GetStock method")
	}

	mmGetStock.mock.funcGetStock = f
	return mmGetStock.mock
}

// When sets expectation for the StockProvider.GetStock which will trigger the result defined by the following
// Then helper
func (mmGetStock *mStockProviderMockGetStock) When(ctx context.Context, sku models.SKU) *StockProviderMockGetStockExpectation {
	if mmGetStock.mock.funcGetStock != nil {
		mmGetStock.mock.t.Fatalf("StockProviderMock.GetStock mock is already set by Set")
	}

	expectation := &StockProviderMockGetStockExpectation{
		mock:   mmGetStock.mock,
		params: &StockProviderMockGetStockParams{ctx, sku},
	}
	mmGetStock.expectations = append(mmGetStock.expectations, expectation)
	return expectation
}

// Then sets up StockProvider.GetStock return parameters for the expectation previously defined by the When method
func (e *StockProviderMockGetStockExpectation) Then(count uint64, err error) *StockProviderMock {
	e.results = &StockProviderMockGetStockResults{count, err}
	return e.mock
}

// GetStock implements cart.StockProvider
func (mmGetStock *StockProviderMock) GetStock(ctx context.Context, sku models.SKU) (count uint64, err error) {
	mm_atomic.AddUint64(&mmGetStock.beforeGetStockCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStock.afterGetStockCounter, 1)

	if mmGetStock.inspectFuncGetStock != nil {
		mmGetStock.inspectFuncGetStock(ctx, sku)
	}

	mm_params := &StockProviderMockGetStockParams{ctx, sku}

	// Record call args
	mmGetStock.GetStockMock.mutex.Lock()
	mmGetStock.GetStockMock.callArgs = append(mmGetStock.GetStockMock.callArgs, mm_params)
	mmGetStock.GetStockMock.mutex.Unlock()

	for _, e := range mmGetStock.GetStockMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.count, e.results.err
		}
	}

	if mmGetStock.GetStockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStock.GetStockMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStock.GetStockMock.defaultExpectation.params
		mm_got := StockProviderMockGetStockParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStock.t.Errorf("StockProviderMock.GetStock got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStock.GetStockMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStock.t.Fatal("No results are set for the StockProviderMock.GetStock")
		}
		return (*mm_results).count, (*mm_results).err
	}
	if mmGetStock.funcGetStock != nil {
		return mmGetStock.funcGetStock(ctx, sku)
	}
	mmGetStock.t.Fatalf("Unexpected call to StockProviderMock.GetStock. %v %v", ctx, sku)
	return
}

// GetStockAfterCounter returns a count of finished StockProviderMock.GetStock invocations
func (mmGetStock *StockProviderMock) GetStockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStock.afterGetStockCounter)
}

// GetStockBeforeCounter returns a count of StockProviderMock.GetStock invocations
func (mmGetStock *StockProviderMock) GetStockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStock.beforeGetStockCounter)
}

// Calls returns a list of arguments used in each call to StockProviderMock.GetStock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStock *mStockProviderMockGetStock) Calls() []*StockProviderMockGetStockParams {
	mmGetStock.mutex.RLock()

	argCopy := make([]*StockProviderMockGetStockParams, len(mmGetStock.callArgs))
	copy(argCopy, mmGetStock.callArgs)

	mmGetStock.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockDone returns true if the count of the GetStock invocations corresponds
// the number of defined expectations
func (m *StockProviderMock) MinimockGetStockDone() bool {
	for _, e := range m.GetStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStockCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStock != nil && mm_atomic.LoadUint64(&m.afterGetStockCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStockInspect logs each unmet expectation
func (m *StockProviderMock) MinimockGetStockInspect() {
	for _, e := range m.GetStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockProviderMock.GetStock with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStockCounter) < 1 {
		if m.GetStockMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockProviderMock.GetStock")
		} else {
			m.t.Errorf("Expected call to StockProviderMock.GetStock with params: %#v", *m.GetStockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStock != nil && mm_atomic.LoadUint64(&m.afterGetStockCounter) < 1 {
		m.t.Error("Expected call to StockProviderMock.GetStock")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockProviderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetStockInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetStockDone()
}
