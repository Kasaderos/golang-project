package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductProviderMock implements cart.ProductProvider
type ProductProviderMock struct {
	t minimock.Tester

	funcGetProductInfo          func(ctx context.Context, sku models.SKU) (name string, price uint32, err error)
	inspectFuncGetProductInfo   func(ctx context.Context, sku models.SKU)
	afterGetProductInfoCounter  uint64
	beforeGetProductInfoCounter uint64
	GetProductInfoMock          mProductProviderMockGetProductInfo
}

// NewProductProviderMock returns a mock for cart.ProductProvider
func NewProductProviderMock(t minimock.Tester) *ProductProviderMock {
	m := &ProductProviderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductInfoMock = mProductProviderMockGetProductInfo{mock: m}
	m.GetProductInfoMock.callArgs = []*ProductProviderMockGetProductInfoParams{}

	return m
}

type mProductProviderMockGetProductInfo struct {
	mock               *ProductProviderMock
	defaultExpectation *ProductProviderMockGetProductInfoExpectation
	expectations       []*ProductProviderMockGetProductInfoExpectation

	callArgs []*ProductProviderMockGetProductInfoParams
	mutex    sync.RWMutex
}

// ProductProviderMockGetProductInfoExpectation specifies expectation struct of the ProductProvider.GetProductInfo
type ProductProviderMockGetProductInfoExpectation struct {
	mock    *ProductProviderMock
	params  *ProductProviderMockGetProductInfoParams
	results *ProductProviderMockGetProductInfoResults
	Counter uint64
}

// ProductProviderMockGetProductInfoParams contains parameters of the ProductProvider.GetProductInfo
type ProductProviderMockGetProductInfoParams struct {
	ctx context.Context
	sku models.SKU
}

// ProductProviderMockGetProductInfoResults contains results of the ProductProvider.GetProductInfo
type ProductProviderMockGetProductInfoResults struct {
	name  string
	price uint32
	err   error
}

// Expect sets up expected params for ProductProvider.GetProductInfo
func (mmGetProductInfo *mProductProviderMockGetProductInfo) Expect(ctx context.Context, sku models.SKU) *mProductProviderMockGetProductInfo {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductProviderMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductProviderMockGetProductInfoExpectation{}
	}

	mmGetProductInfo.defaultExpectation.params = &ProductProviderMockGetProductInfoParams{ctx, sku}
	for _, e := range mmGetProductInfo.expectations {
		if minimock.Equal(e.params, mmGetProductInfo.defaultExpectation.params) {
			mmGetProductInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductInfo.defaultExpectation.params)
		}
	}

	return mmGetProductInfo
}

// Inspect accepts an inspector function that has same arguments as the ProductProvider.GetProductInfo
func (mmGetProductInfo *mProductProviderMockGetProductInfo) Inspect(f func(ctx context.Context, sku models.SKU)) *mProductProviderMockGetProductInfo {
	if mmGetProductInfo.mock.inspectFuncGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("Inspect function is already set for ProductProviderMock.GetProductInfo")
	}

	mmGetProductInfo.mock.inspectFuncGetProductInfo = f

	return mmGetProductInfo
}

// Return sets up results that will be returned by ProductProvider.GetProductInfo
func (mmGetProductInfo *mProductProviderMockGetProductInfo) Return(name string, price uint32, err error) *ProductProviderMock {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductProviderMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductProviderMockGetProductInfoExpectation{mock: mmGetProductInfo.mock}
	}
	mmGetProductInfo.defaultExpectation.results = &ProductProviderMockGetProductInfoResults{name, price, err}
	return mmGetProductInfo.mock
}

// Set uses given function f to mock the ProductProvider.GetProductInfo method
func (mmGetProductInfo *mProductProviderMockGetProductInfo) Set(f func(ctx context.Context, sku models.SKU) (name string, price uint32, err error)) *ProductProviderMock {
	if mmGetProductInfo.defaultExpectation != nil {
		mmGetProductInfo.mock.t.Fatalf("Default expectation is already set for the ProductProvider.GetProductInfo method")
	}

	if len(mmGetProductInfo.expectations) > 0 {
		mmGetProductInfo.mock.t.Fatalf("Some expectations are already set for the ProductProvider.GetProductInfo method")
	}

	mmGetProductInfo.mock.funcGetProductInfo = f
	return mmGetProductInfo.mock
}

// When sets expectation for the ProductProvider.GetProductInfo which will trigger the result defined by the following
// Then helper
func (mmGetProductInfo *mProductProviderMockGetProductInfo) When(ctx context.Context, sku models.SKU) *ProductProviderMockGetProductInfoExpectation {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductProviderMock.GetProductInfo mock is already set by Set")
	}

	expectation := &ProductProviderMockGetProductInfoExpectation{
		mock:   mmGetProductInfo.mock,
		params: &ProductProviderMockGetProductInfoParams{ctx, sku},
	}
	mmGetProductInfo.expectations = append(mmGetProductInfo.expectations, expectation)
	return expectation
}

// Then sets up ProductProvider.GetProductInfo return parameters for the expectation previously defined by the When method
func (e *ProductProviderMockGetProductInfoExpectation) Then(name string, price uint32, err error) *ProductProviderMock {
	e.results = &ProductProviderMockGetProductInfoResults{name, price, err}
	return e.mock
}

// GetProductInfo implements cart.ProductProvider
func (mmGetProductInfo *ProductProviderMock) GetProductInfo(ctx context.Context, sku models.SKU) (name string, price uint32, err error) {
	mm_atomic.AddUint64(&mmGetProductInfo.beforeGetProductInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductInfo.afterGetProductInfoCounter, 1)

	if mmGetProductInfo.inspectFuncGetProductInfo != nil {
		mmGetProductInfo.inspectFuncGetProductInfo(ctx, sku)
	}

	mm_params := &ProductProviderMockGetProductInfoParams{ctx, sku}

	// Record call args
	mmGetProductInfo.GetProductInfoMock.mutex.Lock()
	mmGetProductInfo.GetProductInfoMock.callArgs = append(mmGetProductInfo.GetProductInfoMock.callArgs, mm_params)
	mmGetProductInfo.GetProductInfoMock.mutex.Unlock()

	for _, e := range mmGetProductInfo.GetProductInfoMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.name, e.results.price, e.results.err
		}
	}

	if mmGetProductInfo.GetProductInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductInfo.GetProductInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductInfo.GetProductInfoMock.defaultExpectation.params
		mm_got := ProductProviderMockGetProductInfoParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductInfo.t.Errorf("ProductProviderMock.GetProductInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductInfo.GetProductInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductInfo.t.Fatal("No results are set for the ProductProviderMock.GetProductInfo")
		}
		return (*mm_results).name, (*mm_results).price, (*mm_results).err
	}
	if mmGetProductInfo.funcGetProductInfo != nil {
		return mmGetProductInfo.funcGetProductInfo(ctx, sku)
	}
	mmGetProductInfo.t.Fatalf("Unexpected call to ProductProviderMock.GetProductInfo. %v %v", ctx, sku)
	return
}

// GetProductInfoAfterCounter returns a count of finished ProductProviderMock.GetProductInfo invocations
func (mmGetProductInfo *ProductProviderMock) GetProductInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInfo.afterGetProductInfoCounter)
}

// GetProductInfoBeforeCounter returns a count of ProductProviderMock.GetProductInfo invocations
func (mmGetProductInfo *ProductProviderMock) GetProductInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInfo.beforeGetProductInfoCounter)
}

// Calls returns a list of arguments used in each call to ProductProviderMock.GetProductInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductInfo *mProductProviderMockGetProductInfo) Calls() []*ProductProviderMockGetProductInfoParams {
	mmGetProductInfo.mutex.RLock()

	argCopy := make([]*ProductProviderMockGetProductInfoParams, len(mmGetProductInfo.callArgs))
	copy(argCopy, mmGetProductInfo.callArgs)

	mmGetProductInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductInfoDone returns true if the count of the GetProductInfo invocations corresponds
// the number of defined expectations
func (m *ProductProviderMock) MinimockGetProductInfoDone() bool {
	for _, e := range m.GetProductInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductInfo != nil && mm_atomic.LoadUint64(&m.afterGetProductInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductInfoInspect logs each unmet expectation
func (m *ProductProviderMock) MinimockGetProductInfoInspect() {
	for _, e := range m.GetProductInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductProviderMock.GetProductInfo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductInfoCounter) < 1 {
		if m.GetProductInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductProviderMock.GetProductInfo")
		} else {
			m.t.Errorf("Expected call to ProductProviderMock.GetProductInfo with params: %#v", *m.GetProductInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductInfo != nil && mm_atomic.LoadUint64(&m.afterGetProductInfoCounter) < 1 {
		m.t.Error("Expected call to ProductProviderMock.GetProductInfo")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductProviderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProductInfoInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductInfoDone()
}
