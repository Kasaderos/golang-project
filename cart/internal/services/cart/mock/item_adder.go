package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ItemAdderMock implements cart.ItemAdder
type ItemAdderMock struct {
	t minimock.Tester

	funcAddItem          func(ctx context.Context, userID models.UserID, item models.CartItem) (err error)
	inspectFuncAddItem   func(ctx context.Context, userID models.UserID, item models.CartItem)
	afterAddItemCounter  uint64
	beforeAddItemCounter uint64
	AddItemMock          mItemAdderMockAddItem
}

// NewItemAdderMock returns a mock for cart.ItemAdder
func NewItemAdderMock(t minimock.Tester) *ItemAdderMock {
	m := &ItemAdderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddItemMock = mItemAdderMockAddItem{mock: m}
	m.AddItemMock.callArgs = []*ItemAdderMockAddItemParams{}

	return m
}

type mItemAdderMockAddItem struct {
	mock               *ItemAdderMock
	defaultExpectation *ItemAdderMockAddItemExpectation
	expectations       []*ItemAdderMockAddItemExpectation

	callArgs []*ItemAdderMockAddItemParams
	mutex    sync.RWMutex
}

// ItemAdderMockAddItemExpectation specifies expectation struct of the ItemAdder.AddItem
type ItemAdderMockAddItemExpectation struct {
	mock    *ItemAdderMock
	params  *ItemAdderMockAddItemParams
	results *ItemAdderMockAddItemResults
	Counter uint64
}

// ItemAdderMockAddItemParams contains parameters of the ItemAdder.AddItem
type ItemAdderMockAddItemParams struct {
	ctx    context.Context
	userID models.UserID
	item   models.CartItem
}

// ItemAdderMockAddItemResults contains results of the ItemAdder.AddItem
type ItemAdderMockAddItemResults struct {
	err error
}

// Expect sets up expected params for ItemAdder.AddItem
func (mmAddItem *mItemAdderMockAddItem) Expect(ctx context.Context, userID models.UserID, item models.CartItem) *mItemAdderMockAddItem {
	if mmAddItem.mock.funcAddItem != nil {
		mmAddItem.mock.t.Fatalf("ItemAdderMock.AddItem mock is already set by Set")
	}

	if mmAddItem.defaultExpectation == nil {
		mmAddItem.defaultExpectation = &ItemAdderMockAddItemExpectation{}
	}

	mmAddItem.defaultExpectation.params = &ItemAdderMockAddItemParams{ctx, userID, item}
	for _, e := range mmAddItem.expectations {
		if minimock.Equal(e.params, mmAddItem.defaultExpectation.params) {
			mmAddItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddItem.defaultExpectation.params)
		}
	}

	return mmAddItem
}

// Inspect accepts an inspector function that has same arguments as the ItemAdder.AddItem
func (mmAddItem *mItemAdderMockAddItem) Inspect(f func(ctx context.Context, userID models.UserID, item models.CartItem)) *mItemAdderMockAddItem {
	if mmAddItem.mock.inspectFuncAddItem != nil {
		mmAddItem.mock.t.Fatalf("Inspect function is already set for ItemAdderMock.AddItem")
	}

	mmAddItem.mock.inspectFuncAddItem = f

	return mmAddItem
}

// Return sets up results that will be returned by ItemAdder.AddItem
func (mmAddItem *mItemAdderMockAddItem) Return(err error) *ItemAdderMock {
	if mmAddItem.mock.funcAddItem != nil {
		mmAddItem.mock.t.Fatalf("ItemAdderMock.AddItem mock is already set by Set")
	}

	if mmAddItem.defaultExpectation == nil {
		mmAddItem.defaultExpectation = &ItemAdderMockAddItemExpectation{mock: mmAddItem.mock}
	}
	mmAddItem.defaultExpectation.results = &ItemAdderMockAddItemResults{err}
	return mmAddItem.mock
}

// Set uses given function f to mock the ItemAdder.AddItem method
func (mmAddItem *mItemAdderMockAddItem) Set(f func(ctx context.Context, userID models.UserID, item models.CartItem) (err error)) *ItemAdderMock {
	if mmAddItem.defaultExpectation != nil {
		mmAddItem.mock.t.Fatalf("Default expectation is already set for the ItemAdder.AddItem method")
	}

	if len(mmAddItem.expectations) > 0 {
		mmAddItem.mock.t.Fatalf("Some expectations are already set for the ItemAdder.AddItem method")
	}

	mmAddItem.mock.funcAddItem = f
	return mmAddItem.mock
}

// When sets expectation for the ItemAdder.AddItem which will trigger the result defined by the following
// Then helper
func (mmAddItem *mItemAdderMockAddItem) When(ctx context.Context, userID models.UserID, item models.CartItem) *ItemAdderMockAddItemExpectation {
	if mmAddItem.mock.funcAddItem != nil {
		mmAddItem.mock.t.Fatalf("ItemAdderMock.AddItem mock is already set by Set")
	}

	expectation := &ItemAdderMockAddItemExpectation{
		mock:   mmAddItem.mock,
		params: &ItemAdderMockAddItemParams{ctx, userID, item},
	}
	mmAddItem.expectations = append(mmAddItem.expectations, expectation)
	return expectation
}

// Then sets up ItemAdder.AddItem return parameters for the expectation previously defined by the When method
func (e *ItemAdderMockAddItemExpectation) Then(err error) *ItemAdderMock {
	e.results = &ItemAdderMockAddItemResults{err}
	return e.mock
}

// AddItem implements cart.ItemAdder
func (mmAddItem *ItemAdderMock) AddItem(ctx context.Context, userID models.UserID, item models.CartItem) (err error) {
	mm_atomic.AddUint64(&mmAddItem.beforeAddItemCounter, 1)
	defer mm_atomic.AddUint64(&mmAddItem.afterAddItemCounter, 1)

	if mmAddItem.inspectFuncAddItem != nil {
		mmAddItem.inspectFuncAddItem(ctx, userID, item)
	}

	mm_params := &ItemAdderMockAddItemParams{ctx, userID, item}

	// Record call args
	mmAddItem.AddItemMock.mutex.Lock()
	mmAddItem.AddItemMock.callArgs = append(mmAddItem.AddItemMock.callArgs, mm_params)
	mmAddItem.AddItemMock.mutex.Unlock()

	for _, e := range mmAddItem.AddItemMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddItem.AddItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddItem.AddItemMock.defaultExpectation.Counter, 1)
		mm_want := mmAddItem.AddItemMock.defaultExpectation.params
		mm_got := ItemAdderMockAddItemParams{ctx, userID, item}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddItem.t.Errorf("ItemAdderMock.AddItem got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddItem.AddItemMock.defaultExpectation.results
		if mm_results == nil {
			mmAddItem.t.Fatal("No results are set for the ItemAdderMock.AddItem")
		}
		return (*mm_results).err
	}
	if mmAddItem.funcAddItem != nil {
		return mmAddItem.funcAddItem(ctx, userID, item)
	}
	mmAddItem.t.Fatalf("Unexpected call to ItemAdderMock.AddItem. %v %v %v", ctx, userID, item)
	return
}

// AddItemAfterCounter returns a count of finished ItemAdderMock.AddItem invocations
func (mmAddItem *ItemAdderMock) AddItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddItem.afterAddItemCounter)
}

// AddItemBeforeCounter returns a count of ItemAdderMock.AddItem invocations
func (mmAddItem *ItemAdderMock) AddItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddItem.beforeAddItemCounter)
}

// Calls returns a list of arguments used in each call to ItemAdderMock.AddItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddItem *mItemAdderMockAddItem) Calls() []*ItemAdderMockAddItemParams {
	mmAddItem.mutex.RLock()

	argCopy := make([]*ItemAdderMockAddItemParams, len(mmAddItem.callArgs))
	copy(argCopy, mmAddItem.callArgs)

	mmAddItem.mutex.RUnlock()

	return argCopy
}

// MinimockAddItemDone returns true if the count of the AddItem invocations corresponds
// the number of defined expectations
func (m *ItemAdderMock) MinimockAddItemDone() bool {
	for _, e := range m.AddItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddItem != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddItemInspect logs each unmet expectation
func (m *ItemAdderMock) MinimockAddItemInspect() {
	for _, e := range m.AddItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ItemAdderMock.AddItem with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddItemMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		if m.AddItemMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ItemAdderMock.AddItem")
		} else {
			m.t.Errorf("Expected call to ItemAdderMock.AddItem with params: %#v", *m.AddItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddItem != nil && mm_atomic.LoadUint64(&m.afterAddItemCounter) < 1 {
		m.t.Error("Expected call to ItemAdderMock.AddItem")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ItemAdderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddItemInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ItemAdderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ItemAdderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddItemDone()
}
