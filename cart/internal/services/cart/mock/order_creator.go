package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/cart/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderCreatorMock implements cart.OrderCreator
type OrderCreatorMock struct {
	t minimock.Tester

	funcCreateOrder          func(ctx context.Context, userID models.UserID, items []models.CartItem) (o1 models.OrderID, err error)
	inspectFuncCreateOrder   func(ctx context.Context, userID models.UserID, items []models.CartItem)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mOrderCreatorMockCreateOrder
}

// NewOrderCreatorMock returns a mock for cart.OrderCreator
func NewOrderCreatorMock(t minimock.Tester) *OrderCreatorMock {
	m := &OrderCreatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mOrderCreatorMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*OrderCreatorMockCreateOrderParams{}

	return m
}

type mOrderCreatorMockCreateOrder struct {
	mock               *OrderCreatorMock
	defaultExpectation *OrderCreatorMockCreateOrderExpectation
	expectations       []*OrderCreatorMockCreateOrderExpectation

	callArgs []*OrderCreatorMockCreateOrderParams
	mutex    sync.RWMutex
}

// OrderCreatorMockCreateOrderExpectation specifies expectation struct of the OrderCreator.CreateOrder
type OrderCreatorMockCreateOrderExpectation struct {
	mock    *OrderCreatorMock
	params  *OrderCreatorMockCreateOrderParams
	results *OrderCreatorMockCreateOrderResults
	Counter uint64
}

// OrderCreatorMockCreateOrderParams contains parameters of the OrderCreator.CreateOrder
type OrderCreatorMockCreateOrderParams struct {
	ctx    context.Context
	userID models.UserID
	items  []models.CartItem
}

// OrderCreatorMockCreateOrderResults contains results of the OrderCreator.CreateOrder
type OrderCreatorMockCreateOrderResults struct {
	o1  models.OrderID
	err error
}

// Expect sets up expected params for OrderCreator.CreateOrder
func (mmCreateOrder *mOrderCreatorMockCreateOrder) Expect(ctx context.Context, userID models.UserID, items []models.CartItem) *mOrderCreatorMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderCreatorMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrderCreatorMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &OrderCreatorMockCreateOrderParams{ctx, userID, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the OrderCreator.CreateOrder
func (mmCreateOrder *mOrderCreatorMockCreateOrder) Inspect(f func(ctx context.Context, userID models.UserID, items []models.CartItem)) *mOrderCreatorMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for OrderCreatorMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by OrderCreator.CreateOrder
func (mmCreateOrder *mOrderCreatorMockCreateOrder) Return(o1 models.OrderID, err error) *OrderCreatorMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderCreatorMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrderCreatorMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &OrderCreatorMockCreateOrderResults{o1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the OrderCreator.CreateOrder method
func (mmCreateOrder *mOrderCreatorMockCreateOrder) Set(f func(ctx context.Context, userID models.UserID, items []models.CartItem) (o1 models.OrderID, err error)) *OrderCreatorMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the OrderCreator.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the OrderCreator.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the OrderCreator.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mOrderCreatorMockCreateOrder) When(ctx context.Context, userID models.UserID, items []models.CartItem) *OrderCreatorMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderCreatorMock.CreateOrder mock is already set by Set")
	}

	expectation := &OrderCreatorMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &OrderCreatorMockCreateOrderParams{ctx, userID, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up OrderCreator.CreateOrder return parameters for the expectation previously defined by the When method
func (e *OrderCreatorMockCreateOrderExpectation) Then(o1 models.OrderID, err error) *OrderCreatorMock {
	e.results = &OrderCreatorMockCreateOrderResults{o1, err}
	return e.mock
}

// CreateOrder implements cart.OrderCreator
func (mmCreateOrder *OrderCreatorMock) CreateOrder(ctx context.Context, userID models.UserID, items []models.CartItem) (o1 models.OrderID, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userID, items)
	}

	mm_params := &OrderCreatorMockCreateOrderParams{ctx, userID, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.o1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := OrderCreatorMockCreateOrderParams{ctx, userID, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("OrderCreatorMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the OrderCreatorMock.CreateOrder")
		}
		return (*mm_results).o1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userID, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to OrderCreatorMock.CreateOrder. %v %v %v", ctx, userID, items)
	return
}

// CreateOrderAfterCounter returns a count of finished OrderCreatorMock.CreateOrder invocations
func (mmCreateOrder *OrderCreatorMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of OrderCreatorMock.CreateOrder invocations
func (mmCreateOrder *OrderCreatorMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to OrderCreatorMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mOrderCreatorMockCreateOrder) Calls() []*OrderCreatorMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*OrderCreatorMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *OrderCreatorMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *OrderCreatorMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderCreatorMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderCreatorMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to OrderCreatorMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to OrderCreatorMock.CreateOrder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderCreatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateOrderInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone()
}
